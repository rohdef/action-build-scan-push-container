name: Build container
description: ""

inputs:
  annotations:
    description: "List (new line for each entry) of annotation to set to the image"
    required: false
  build-args:
    description: "List of build-time variables"
    required: false
  dockerfile-path:
    description: "Path to the Dockerfile"
    required: true
  labels:
    description: "List (new line for each entry) of metadata for an image"
    required: false
  tags:
    description: "List of tags"
    required: false
  target:
    description: "Sets the target stage to build"
    required: false
  github-token:
    description: "GitHub Token used to authenticate against a repository for Git context"
    default: ${{ github.token }}
    required: false

  image-destination-host:
    description: "Where to upload the artifact to - if only local is desired just use \"localhost:5000\" - trailing slash is not allowed"
    default: ghcr.io
    required: true
  image-destination-name:
    description: "The desired name of the output artifact, defaults to: \"owner/repository\""
    default: "${{ github.repository }}"
    required: false
#  image-destination-tag-override:
#    description: "If the default tag generation is to be overridden"
#    default: ""
#    required: false


outputs:
  imageid:
    description: 'Image ID'
    value: ${{ steps.build-image.outputs.imageid }}
#  digest:
#    description: 'Image digest'
#  metadata:
#    description: 'Build result metadata'
#
#  container-image:
#    description: The random image name used for generation
#    value: ${{ steps.build-image.outputs.container-image }}
#  image-digest:
#    description: The digest of the final image
#    value: ${{ steps.push-image.outputs.image-digest }}

runs:
  using: composite
  steps:
    - name: Build image
      id: build-image
      uses: rohdef/action-build-container@main
      with:
        annotations: ${{ inputs.annotations }}
        build-args: ${{ inputs.build-args }}
        dockerfile-path: ${{ inputs.dockerfile-path }}
        labels: ${{ inputs.labels }}

    - name: Scan container for vulnerabilities
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ steps.build-image.outputs.imageid }}
        format: "table"
        exit-code: "1"
      env:
        TRIVY_SKIP_DB_UPDATE: true
        TRIVY_SKIP_JAVA_DB_UPDATE: true

#    - name: Push image
#      id: push-image
#      shell: bash
#      run: |
#        # This changes all uppercase characters to lowercase.
#        IMAGE_ID=$(echo "${{ inputs.image-destination-host }}/${{ inputs.image-destination-name }}" | tr '[A-Z]' '[a-z]')
#
#        # This strips the git ref prefix from the version.
#        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#        # This strips the "v" prefix from the tag name.
#        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
#        # This uses the Docker `latest` tag convention.
#        [ "$VERSION" == "main" ] && VERSION=latest
#
#        echo "Pushing image to"
#        echo "$IMAGE_ID:$VERSION"
#
#        docker tag \
#          "${{ steps.build-image.outputs.container-image }}" \
#          "$IMAGE_ID:$VERSION"
#        docker push "$IMAGE_ID:$VERSION"
#
#        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_ID:$VERSION")
#        echo "image-digest=$(echo ${IMAGE_DIGEST})" >> "$GITHUB_OUTPUT"
